This contract has NOT yet been confirmed by all of its parties. (FYI.)
-------------------------------------
===> Smart contract has 1 bylaw. <===

-----------------
Clauses in bylaw 'main_bylaws' are written in the 'chai' scripting language. (FYI.)
-----------------
There are 12 variables on bylaw 'main_bylaws'...
Variable 'bool_alice_dispute' is type 'boolean' and has access level 'important'. Contents: false
Variable 'bool_bob_reply' is type 'boolean' and has access level 'important'. Contents: false
Variable 'bool_judy_judgment' is type 'boolean' and has access level 'important'. Contents: false
Variable 'nState' is type 'integer' and has access level 'important'. Contents: 0
Variable 'str_alice_amount' is type 'string' and has access level 'constant'. Contents: 155
Variable 'str_alice_dispute' is type 'string' and has access level 'important'. Contents: If Alice disputes, her dispute goes here.
Variable 'str_bob_reply' is type 'string' and has access level 'important'. Contents: Bob's reply to Alice's dispute goes here.
Variable 'str_consideration' is type 'string' and has access level 'constant'. Contents: (Consideration must be described here.)
Variable 'str_error_status' is type 'string' and has access level 'important'. Contents: (Error messages go here.)
Variable 'str_judy_cut' is type 'string' and has access level 'constant'. Contents: 5
Variable 'str_judy_judgment' is type 'string' and has access level 'important'. Contents: Judy's final judgment goes here.
Variable 'str_judy_render_cut' is type 'string' and has access level 'constant'. Contents: 20
-----------------
There are 7 clauses on bylaw 'main_bylaws'...
---------------------
Clause 'activate_clause' Code:
print("SCRIPTED CLAUSE: Abitrated escrow: This is the clause for the OnActivate() hook. (On a smartcontract.)")
                // The amount Alice is sending to Bob
                // Amount set aside for adjudication fees. (non-refundable.) 
                // Amount set aside for adjudication fees. (refundable.)
var nTotalStashed       = (str_alice_amount.to_int() + str_judy_cut.to_int() + str_judy_render_cut.to_int());
var strTotalStash       = to_string(nTotalStashed);
 
var bStashedAlice       =  stash_funds(alice_acct, "alice_stash", strTotalStash)
 
if (!bStashedAlice) 
{
        str_error_status("Failed trying to activate escrow contract. (Couldn't get funds.)")
    deactivate_contract()
}
else // Success stashing funds.
{
        set_seconds_until_timer("2592000")      // 30 days until payment automatically passes to Bob.
}

---------------------
Clause 'alice_dispute_clause' Code:
print("SCRIPTED CLAUSE: Arbitrated escrow: This is Alice's dispute clause. (On a smartcontract.)")
 
 if (0 == nState)               // 0 == normal state (which we must be in, in order for Alice to dispute.)
 {
        nState                          = 1;                    // Alice has disputed. (Now we are state 1 -- waiting for Bob reply.)
        bool_alice_dispute      = true;                 // Alice has officially triggered her dispute option. (Throughout all states, this remains separately recorded.)
        str_alice_dispute       = param_string; // The parameter passed in is Alice's dispute story.

        set_seconds_until_timer("604800")       // 7 days until Bob must reply.
 }

---------------------
Clause 'bob_reply_clause' Code:
 print("SCRIPTED CLAUSE: Arbitrated escrow: This is Bob's clause for recording his reply to Alice's dispute.")
 
 if (1 == nState)               // 1 == Alice has disputed; waiting for Bob's reply. MUST be in this state.
 {
        nState                          = 2;                    // Bob has replied. Now waiting on Judge Judy to render a judgment.
        bool_bob_reply          = true;                 // Bob has officially replied to Alice's dispute. (Throughout all states, this remains separately recorded.)
        str_bob_reply           = param_string; // The parameter passed in is Bob's side of the story.

        set_seconds_until_timer("604800")       // 7 days until Judy must make a ruling.
 }

---------------------
Clause 'judy_render_judgment' Code:
 print("SCRIPTED CLAUSE: Arbitrated escrow: This is Judge Judy's clause for rendering judgment in the event of a dispute.")
 
 if (2 == nState)               // 1 == Alice has disputed, Bob has replied; waiting for Judge Judy now to render a judgment. MUST be in this state.
 {
        var nFind1      = param_string.find("Alice");
        var nFind2      = param_string.find("alice");

        var nFind3      = param_string.find("Bob");
        var nFind4      = param_string.find("bob");
 
        var nFoundAlice = -1;
        var nFoundBob   = -1;

        // -----------------------------------------------------------
        // set nFoundAlice and nFoundBob to contain the lowest legitimate location
        // of the substring of their names (in the judge's param) or -1 if not found.
        //
        if (nFind1 >= 0) { nFoundAlice = nFind1; }
        if ((nFind2 >= 0) && (nFind2 < nFoundAlice)) { nFoundAlice = nFind2; }

        if (nFind3 >= 0) { nFoundBob = nFind3; }
        if ((nFind4 >= 0) && (nFind4 < nFoundBob)) { nFoundBob = nFind4; }
        // -----------------------------------------------------------
        // BELOW THIS POINT, if nFoundAlice is -1, the string wasn't found at all. If nFoundBob
        // is -1, that string wasn't found at all. If they are 0 or greater, then the smaller one
        // is the winner, because it is the one the judge mentions first.
        //
        // THE NAME MENTIONED FIRST, BY THE JUDGE, IS THE WINNER, ACCORDING TO THIS CODE!!
        // The remainder of the judge's decision can include reasoning, etc. Just make sure the
        // winner's name is stated before the loser.

        if (nFoundAlice >= 0) 
        { 
                nState = 3;                     // Judy has decided for Alice possibly...
        }
        if (nFoundBob >= 0)             // However...
        {
                if (nFoundBob < nFoundAlice)
                {
                        nState  = 4;    // ...Judy has actually decided for Bob.
                }
        }

        str_judy_judgment       = param_string; // The parameter passed in is Judy's decision. (Or her attempt at such.)

        // Judy has legitimately decided (for either Alice or Bob.)
        // Otherwise, do nothing -- maybe she mistyped.
        //
        if ((3 == nState) || (4 == nState))
        {
                bool_judy_judgment      = true;                 // Judy has officially rendered judgment.

                var nJudyTotal          = str_judy_cut.to_int() + str_judy_render_cut.to_int(); // Total amount of Judy's pay, including adjudication fees.
                var strJudyTotal        = to_string(nJudyTotal);

                var b1 = unstash_funds(judy_acct, "alice_stash", strJudyTotal)

                if (3 == nState)        // 3 == Judy has decided for Alice.
                {
                        var b2 = unstash_funds(alice_acct, "alice_stash",       str_alice_amount)
                }
                else if (4 == nState)   // 4 == Judy has decided for Bob.
                {
                        var b2 = unstash_funds(bob_acct, "alice_stash",         str_alice_amount)
                }

                deactivate_contract()
        }
        else
        {
                str_error_status = "Judge Judy triggered her judgment clause, but script was unable to determine a clear winner based on her answer."
        }
 }


---------------------
Clause 'may_cancel_contract' Code:
  print("MAY CANCEL? (from may_cancel_contract callback. Returning false from script.)"); false; 

---------------------
Clause 'may_execute_clause' Code:
print("MAY EXECUTE? (from may_execute_clause callback.)"); if ( ((param_party_name == 'party_alice') && (param_clause_name == 'alice_dispute_clause')) || ((param_party_name == 'party_bob') && (param_clause_name == 'bob_reply_clause')) || ((param_party_name == 'party_judy') && (param_clause_name == 'judy_render_judgment')) ) { return true; } return false; 

---------------------
Clause 'process_clause' Code:
 print("SCRIPTED CLAUSE: Arbitrated escrow: This is the clause for the OnProcess() hook. (On a smartcontract.)")
 
 if (0 == nState)               // 0 == normal state, money goes to Bob OnProcess().
 {
        // Success. It's been a month. Pay Bob and Judy, and deactivate the contract.
        str_error_status = "Success! It's been a month. (Paying Bob and Judy, and deactivating the contract.)";

        var b1 = unstash_funds(judy_acct, "alice_stash",        str_judy_cut)                   // Pay Judge Judy her normal cut (no adjudication fees. Everything went smooth.)
        var b2 = unstash_funds(bob_acct, "alice_stash",         str_alice_amount)               // Paying Bob the escrow amount.
        var b3 = unstash_funds(alice_acct, "alice_stash",       str_judy_render_cut)    // Refunding judgment fee, since no adjudication was necessary.

        deactivate_contract()
 }
 else if (1 == nState)  // 1 == We waited for Bob's reply, but now his 7 days are up!
 {
        // (Since Bob didn't reply in time, Alice wins by default.)
        str_error_status = "Bob never replied, and now his time is up! (Paying the money back to Alice, less Judy's non-refundable fee.)";

        var nTotalStashed       = (str_alice_amount.to_int() + str_judy_render_cut.to_int());
        var strTotalStash       = to_string(nTotalStashed);

        var b1 = unstash_funds(judy_acct, "alice_stash",        str_judy_cut)   // Pay Judge Judy her normal cut (no adjudication fees.)
        var b2 = unstash_funds(alice_acct, "alice_stash",       strTotalStash)  // Paying Alice the escrow amount, plus the judgment fee, since no adjudication was necessary.

        deactivate_contract()
 }
 else if (2 == nState)  // 2 == Bob replied, but then Judge Judy failed to make a decision in time!
 {
        // Since Judy didn't reply in time, then she doesn't get paid at all.
        // In order to err on protecting the customer, the money is sent back to Alice.
        str_error_status = "Judy never rendered a decision! (Paying the money back to Alice.)";

        var nTotalStashed       = (str_alice_amount.to_int() + str_judy_cut.to_int() + str_judy_render_cut.to_int())
        var strTotalStash       = to_string(nTotalStashed)

        var b1 = unstash_funds(alice_acct, "alice_stash",       strTotalStash)

        deactivate_contract()
 }

-----------------
There are 2 hooks on bylaw 'main_bylaws'...
HOOK 'cron_activate' will trigger clause:       activate_clause
HOOK 'cron_process' will trigger clause:        process_clause
-----------------
There are 2 callback handlers on bylaw 'main_bylaws'...
CALLBACK 'callback_party_may_cancel_contract' will be handled by clause: may_cancel_contract
CALLBACK 'callback_party_may_execute_clause' will be handled by clause: may_execute_clause
-------------------------------------
===> Smart contract has 3 parties. <===

-----------------
Party 'party_alice' is merely a template, waiting for a real Nym to come along and play its role.

-----------------
Party 'party_bob' is merely a template, waiting for a real Nym to come along and play its role.

-----------------
Party 'party_judy' is merely a template, waiting for a real Nym to come along and play its role.
